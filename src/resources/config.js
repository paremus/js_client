/*
 *  #%L
 *  com.paremus.ui-client
 *  %%
 *  Copyright (C) 2018 - 2020 Paremus Ltd
 *  %%
 *  Licensed under the Fair Source License, Version 0.9 (the "License");
 *
 *  See the NOTICE.txt file distributed with this work for additional
 *  information regarding copyright ownership. You may not use this file
 *  except in compliance with the License. For usage restrictions see the
 *  LICENSE.txt file distributed with this work
 *  #L%
 */

import React from 'react';

import {
    ArrayField,
    Datagrid,
    DeleteButton,
    Edit,
    List,
    RichTextField,
    SaveButton,
    SimpleForm,
    TextField,
    Toolbar
} from 'react-admin';

import {makeStyles} from '@material-ui/core';
import Tooltip from '@material-ui/core/Tooltip';

import AddConfigIcon from '@material-ui/icons/AddCircleOutline';
import FactoryConfigIcon from '@material-ui/icons/AddCircle';
import NoConfigIcon from '@material-ui/icons/Block';
import HasConfigIcon from '@material-ui/icons/CheckCircle';
import UnknownConfigIcon from '@material-ui/icons/Help';

import {ConfigEditField} from './ConfigEditField';
import EditActions from '../defaults/EditActions';

const ListNameField = ({record = {}}) => {
    if (record.factoryPid)
        return <span><b>&gt;&nbsp;</b>{record.pid}</span>;

    if (record.isFactory)
        return <span><i><b>{record.name}</b></i></span>;

    return <span>{record.name}</span>;
};

const ListDeleteButton = (props) => (
    props.record.hasConfiguration ? <DeleteButton {...props}/> : <span/>
);

const ListIconField = ({record = {}, ...props}) => {
    switch (record.type) {
        case 'Factory':
            return <Tooltip title="Configuration Factory">
                <AddConfigIcon/>
            </Tooltip>;
        case 'FactoryConfigured':
            return <Tooltip title="Configured by Factory">
                <FactoryConfigIcon/>
            </Tooltip>;
        case 'MetatypeConfigured':
            return <Tooltip title="Configured by Metatype">
                <HasConfigIcon/>
            </Tooltip>;
        case 'NotConfigured':
            return <Tooltip title="Not Configured">
                <NoConfigIcon/>
            </Tooltip>;
        default:
            return <Tooltip title="Configured by Unknown">
                <UnknownConfigIcon/>
            </Tooltip>;
    }
};

export const ConfigList = props => (
    <List title="Configuration"
          bulkActionButtons={false}
          exporter={false}
          sort={{field: 'name'}}
          {...props}>
        <Datagrid rowClick="edit">
            <ListIconField source="type" label="Type"/>
            <ListNameField source="name" label="Name"/>
            <TextField source="host" label="Host"/>
            <ListDeleteButton/>
        </Datagrid>
    </List>
);

const EditTitle = ({record}) => {
    const title = record.hasConfiguration ? 'Configure' : 'Create';
    return <span>{title} {record.name || record.id}</span>;
};

// remove delete button
const EditToolbar = props => (
    <Toolbar {...props}>
        <SaveButton/>
    </Toolbar>
);

const PidField = ({record}) => {
    const pid = record.isFactory ? '[Real PID generated by factory on save]' : record.pid;
    return <span>{pid}</span>;
};
PidField.defaultProps = {addLabel: true};

const useStyles = makeStyles({
    table: {
        width: '100%',
    },
});

export const ConfigEdit = props => {
    const classes = useStyles();
    return (
        <Edit
            title={<EditTitle/>}
            actions={<EditActions/>}
            undoable={false}
            {...props}>
            <SimpleForm submitOnEnter={false} toolbar={<EditToolbar/>}>
                <RichTextField source="description" />
                <ArrayField source="attributes">
                    <Datagrid classes={{ table: classes.table }}>
                        <ConfigEditField label="Name"/>
                        <TextField source="description" />
                    </Datagrid>
                </ArrayField>
                <PidField label="Persistent Identity (PID)"/>
            </SimpleForm>
        </Edit>
    );
};



